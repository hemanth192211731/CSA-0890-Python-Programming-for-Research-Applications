import heapq

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    min_heap = []
    for i, lst in enumerate(lists):
        if lst:
            heapq.heappush(min_heap, (lst.val, i, lst))
    
    dummy = ListNode(0)
    current = dummy
    while min_heap:
        _, i, node = heapq.heappop(min_heap)
        current.next = node
        current = current.next
        if node.next:
            heapq.heappush(min_heap, (node.next.val, i, node.next))
    
    return dummy.next

# Function to convert list to linked list
def to_linked_list(lst):
    if not lst:
        return None
    head = ListNode(lst[0])
    current = head
    for value in lst[1:]:
        current.next = ListNode(value)
        current = current.next
    return head

# Function to convert linked list to list
def to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

# User input
k = int(input("Enter number of linked lists: "))
lists = []
for i in range(k):
    lst = list(map(int, input(f"Enter sorted linked list {i+1} (space-separated): ").split()))
    lists.append(to_linked_list(lst))

merged_head = mergeKLists(lists)
merged_list = to_list(merged_head)
print("Merged linked list:", merged_list)
