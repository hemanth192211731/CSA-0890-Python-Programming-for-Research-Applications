from collections import Counter, defaultdict

def minWindow(s, t):
    if not s or not t:
        return ""

    dict_t = Counter(t)
    required = len(dict_t)

    left, right = 0, 0
    formed = 0
    window_counts = defaultdict(int)

    min_len = float("inf")
    min_window = (0, 0)

    while right < len(s):
        char = s[right]
        window_counts[char] += 1

        if char in dict_t and window_counts[char] == dict_t[char]:
            formed += 1

        while left <= right and formed == required:
            char = s[left]

            if right - left + 1 < min_len:
                min_len = right - left + 1
                min_window = (left, right)

            window_counts[char] -= 1
            if char in dict_t and window_counts[char] < dict_t[char]:
                formed -= 1

            left += 1

        right += 1

    return "" if min_len == float("inf") else s[min_window[0]:min_window[1] + 1]

# User input
s = input("Enter the string s: ")
t = input("Enter the string t: ")
min_window = minWindow(s, t)
print("Minimum window substring:", min_window)
