class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def reverseKGroup(head, k):
    def reverseLinkedList(head, k):
        prev, curr = None, head
        while k:
            nxt = curr.next
            curr.next = prev
            prev = curr
            curr = nxt
            k -= 1
        return prev

    count = 0
    ptr = head

    while ptr and count < k:
        ptr = ptr.next
        count += 1

    if count == k:
        reversed_head = reverseLinkedList(head, k)
        head.next = reverseKGroup(ptr, k)
        return reversed_head
    return head

# Function to convert list to linked list
def to_linked_list(lst):
    if not lst:
        return None
    head = ListNode(lst[0])
    current = head
    for value in lst[1:]:
        current.next = ListNode(value)
        current = current.next
    return head

# Function to convert linked list to list
def to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

# User input
lst = list(map(int, input("Enter the linked list (space-separated): ").split()))
k = int(input("Enter k: "))
head = to_linked_list(lst)
modified_head = reverseKGroup(head, k)
modified_list = to_list(modified_head)
print("Modified linked list:", modified_list)
